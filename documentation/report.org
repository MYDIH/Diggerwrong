#+TITLE: diggewrong
#+AUTHOR: Nicolas Gomez, Timothée Jourde
#+LANGUAGE: fr

* Introduction
L'objectif du projet de M2103 est de dévelloper une implémentation du jeu =Puru Puru Digger= .
Ce rapport présente notre réalisation : =diggewrong= .

Plutôt que de recopier les objectifs de ce projet nous vous invitons à consulter [[https://sites.google.com/site/projetap2iut/Puru-Puru-Digger][le sujet]] et à jouer à la [[http://www.bigfishgames.fr/jeux-en-ligne/8638/puru-puru-digger/][version originale]].

/Une partie de ce rapport est issue du rapport "préliminaire" de conception. L'annexe 1 en est directement issue et ne reflête donc pas l'état final du produit./

Bonne lecture !

* Architecture
** Modularité

La conception est axée sur l'extensibilité et la simplicité. Le jeu de référence repose sur une grille
composé de "cases" de différentes natures (bombes, bonus, normales...). L'ajout de fonctionnalités se résume
donc avant tout à l'ajout de nouveaux types de cases avec de nouveaux comportements. La conception est donc centrée sur les classes =Square=
et =SquareView= de sorte que l'on puisse ajouter de nouvelles cases simplement en implémentant de nouvelles
classes sans toucher au code existant. Il est même possible d'envisager un chargement dynamique de ces
nouvelles cases.

Le diagramme de classes en /annexe 1/ issue du rapport de conception présente essentiellement ceci. Le produit final est légèrement différent mais le concept est le même. La zone verte représente la partie extensible.

Le fonctionnement de cette architecture sera présenté au fil de ce document.

** Schéma MVC/Observateur
Pour simplifier l'écriture du programme, nous avons choisit de suivre un schéma Model-Vue-Controler & Observable-Observervateur.
Cela à permis de cloisonner des entités distinctes : le jeu en tant que tel, et sa représentation visuelle (ainsi que la gestion des évenements).

La vue est assez pénible à dévelloper avec de nombreuses contraintes dont notemment un fonctionnement non-bloquant pour ne pas gêler l'interface, une gestion fine du temps pour les animations...
Il étais donc important de ne pas polluer le code métier avec ces contraintes, et inversement. Cela à également permis d'ajouter très facilement les fonctionalités de résolveur et de "How-to".

Grâce a cette "non-pollution", le changement de Vue (Interface) peut être opéré très facilement sans toucher au code métier. C'est un des grands avantages du MVC. En ne changeant que les contrôleurs et la vue, il est possible de porter le jeu sur d'autres supports. Un avant goût de ce concept est dévelloppé dans nôtre code avec la possibilité de lancer le jeu en mode console.

*** Menu
Le Menu fait partie de la vue. Il permet a l'utilisateur de configurer le jeu, de lancer la partie et de consulter le tableau des meilleurs scores. Il est composé d'une hiérarchie de classes représentant des écrans, d'un =GuiController= et de deux classes représentant des boutons.

**** Les écrans : =GuiViews=, =MenuView= et =ConfigView=
La plus grosse partie du menu est gérée par ces trois classes. =GuiViews= est une classe abstraite qui s'occuppe de gérer le placement général de l'écran. Ses deux classes filles =MenuView= et =ConfigView=, représentent respectivement le menu principal et la page de configuration. Elle s'occupent de créer les boutons et autres contrôles (notamment le tableau des =ScoresTab= qui est autonome), de les placer par rapport a sa propre position et de relayer les informations transmises par les bouttons vers le Controller.
Pour prendre un exemple concret du comportement de ces classes, les vues de la SFML (=sf::View=) sont très similaires. Cependant, nous avons utilisé cette hiérarchie comme une sorte de conteneur à contrôles comme l'on peut en trouver dans des Frameworks graphiques tels que Qt ou wx.

**** Les Contrôles : =Button, =ScoresTab= et =SwitchButton=
les contrôles représentent les objets en intéraction directe avec l'utilisateur. Chaques contôles sont autonomes. Ils disposent tous d'une fonction =draw()= qui prends en paramètre l'endroit où dessiner et le temps courant. La classe =Button= va simuler un bouton physique banal. Il dispose de fonctions d'affichage et d'une fonction permettant de faire apparaître a l'écran un stimuli visuel indiquant que l'utilisateur peut cliquer a cet endroit.
Le ScoresTab quand à lui ne dispose pas de fonction permettant une intéraction avec l'utilisateur. Il est autonome, il commence par lire le contenu d'un fichier, le tri a l'aide d'une =std::list= et affiche les scores dans l'ordre. Le =SwitchButton= de choisir dans une liste, qu'il lit lui même a partir d'un fichier, la valeur que veut donner l'utilisateur à une des possibilitées de configurations. Il est utilisé dans le choix des thèmes.

**** Le =GuiContoller=
C'est cette classe qui va s'occuper de gérer la totalité des évennements que l'utilisateur peut déclencher. Il s'occupe d'acceder aux bons champs de la =MenuView= et de la =ConfigView= afin que les contrôles puissent agir en conséquence. Il s'occupe aussi de passer la main au =GameController=. Il hérite de =EventHandler= ce qui lui confère une horloge unifiée qui permet a chaque tours de boucle de dispacher les évennements aux bonnes fonctions. Il fournit aussi la totalité des valeurs de temps indispensables au bon déroulement des différentes animations. Il gère la totalité des intéractions et c'est de lui qu'émane tous les ordres reçu par les contrôles.

*** Jeu
Cette section présente les principales classes de la partie Model, Vue et Controller du jeu.

**** Model : =Board= et =Square=
La classe =Board= représente le plateau : une matrice d'instances de =Square= (les cases). La méthode =Board::move()= permet de
déplacer le joueur dans une direction (gauche, droite, haut, bas, et diagonales). La longueur de ce déplacement,
ainsi que ses conséquences (gain de score, modifications du plateau...), dépendent des cases rencontrés ;
c'est pourquoi =Board= ne prend pas directement en charge le déplacement mais fournit simplement une interface
permettant de réaliser certaines actions sur le plateau (remplacement d'une case, ajout de score/bonus, déplacement...).
Il s'agit de la principale classe du Model. 

Pour lancer un déplacement, =Board::move()= appel alors simplement la méthode =Square::dig()= de la première case dans le sens du déplacement, cette méthode a alors accès à l'interface décrite plus haut ; elle peut alors notamment poursuivre le déplacement en appelant récursivement =Square::dig()= sur une autre case (à travers la méthode =Board::digAt()= permettant d'enregistrer le déplacement). La valeur de retour de la première méthode =dig()= appelé détermine si le joueur perd ou non.

La classe =Square= fournit une interface pour =Square::dig()= (ainsi qu'une méthode de clonage et un compteur de références pour faciliter
l'allocation/destruction).



**** Vue : =BoardView= et =Board::Observer=
La classe =BoardView= observe une instance de =Board= et en affiche une représentation. =Board= luis notify chaque changement ( =Board::notify()= ). Ceci implémenté par une file de changements ( =Board::change= ).

=BoardView= ne fait qu'utiliser l'interface =SquareView= de chaque case du plateau. Les cases se dessinent elles mêmes.

Il est ainsi facile d'ajouter un nouveau type de case avec une grande liberté dans l'action de celle-ci tant sur le jeu que sur le rendu graphique : il suffit d'une nouvelle classe héritant de =Square= et de =SquareView=, surchargeant les méthode adéquates.

**** Controller : =GameController=
La classe =EventHandler= permet de simplifier et de factoriser la gestion des évènements ; elle implémente une boucle principale ( méthode =EventHandler::run()= ) traitant les évènements et appelant les méthodes (virtuelles) correspondantes. Cela permet de définir plusieurs contrôleurs ( chacun héritant de =EventHandler= ), pouvant se "passer la main" entre eux.

# je pense que tu peut ajouter des trucs ici
Nous avons ici 2 controlleurs : =GuiController= contrôle le menu d'acceuil, les options... et passe la main à =GameController= pour le jeu. =GameController= gère une partie de jeu complète (instanciation des plateaux, transitions...) et contôle =BoardView= pour afficher les plateaux.

* Quelques algorithmes
** Résolveur & "How-to"
/Voir en annexe 2./
Cet algorithme bien que simple permet de montrer différents aspects intérresants de notre architecture.
# j'ai mis la description de l'algo dans les src...

* Résumé des fonctionalités
En plus de toutes les fonctionalités obligatoires et supplémentaires, nous avons ajoutés les fonctionalités bonus suivantes :
- générateur de niveau
- résolveur de niveau (vérification et "How-to")
- nombre indéfini de niveau
- changement de charte graphique (themes)
 
* Conclusion
Nous avons pris beaucoup de plaisir à réaliser ce projet et y avons
apporter un grand soin.

Avec son architecture modulaire extensible et un rendu graphique
étincellant, nous sommes convaincue de la qualité de notre produit
final.

Bonne partie de =diggewrong= !

* Remerciments à...
- [[http://www.sfml-dev.org/index-fr.php][la SFML]]
- [[http://www.boost.org/][BOOST]]
- [[http://opengameart.org/content/rectangle-gems-etc-16px][qubodup]]        :: sprites des cases
- [[http://opengameart.org/content/more-explosions][StumpyStrust]]   :: animation de l'explosion
- [[https://soundcloud.com/musiikkisirkus/ode-to-joy-beethovens-9th][musiikkisirkus]] :: remix de l'hymne de l'UE (fond sonore)
- [[http://www.freesound.org/people/Greenhourglass/sounds/159375/][Greenhourglass]] :: bruitages
- [[http://www.freesound.org/people/Huminaatio/sounds/221909/][Huminaatio]]     :: bruitages
- [[http://www.freesound.org/people/fins/sounds/171575/][fins]]           :: bruitages
- [[http://www.freesound.org/people/jivatma07/sounds/173858/][jivatma07]]      :: bruitages
- [[http://www.freesound.org/people/jbum/sounds/32090/][jbum]]           :: bruitages


